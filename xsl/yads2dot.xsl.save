<?xml version="1.0"?> 
<xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               xmlns:xrf="http://www.crossref.org/schema_2.0.4#"
               xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns:doi="doi:1014/yads-schema-2002-04-03"
               xmlns:saxon="http://icl.com/saxon"
               xmlns:xalan="org.apache.xalan.xslt.extensions.Redirect"
               extension-element-prefixes="saxon xalan"
               exclude-result-prefixes="xrf"
               version="1.0">

<!--
  // yads2dot.xsl

  Stylesheet to transform an XML document conforming to the YADS
  generic XML Schema to a GraphViz DOT file for generating a graphic
  representation.

  Each description is mapped to a GraphViz DOT file and is
  written to a common output or if the parameter "split" is set
  is written to its own output file. XSLT 1.0 does not support
  multiple outputs so we need to take advantage of vendor-specific
  extensions. Two processors are supported: Saxon and Xalan.

  This transform can be run with four parameters:

    split       - write descriptions to separate files (set value
                  for specific processor: "saxon" or "xalan")

    terminals   - subgraph terminals only (if non-zero)

    title       - add title to graph

    type-nodes  - use typed nodes (if non-zero)

  Author: Tony Hammond <mailto:tony_hammond@harcourt.com>
  Date:   2002.03.27

  Copyright (c) 2002 Elsevier Science Ltd. All rights reserved.
-->

<xsl:output method="text" version="1.0" indent="no"/>
<xsl:strip-space elements="*"/>

<!-- Split output across multiple files if parameter set -->
<xsl:param name="split"/>

<!-- Subgraph terminals only if non-zero -->
<xsl:param name="terminals" select="1"/>

<!-- Title for the graph -->
<xsl:param name="title" select="'YADS - A Description Service'"/>

<!-- Type nodes if non-zero -->
<xsl:param name="type-nodes" select="1"/>

<!-- Set up a global to emit a newline -->
<xsl:variable name="nl" select="'&#x0a;'"/>

<!-- Set up a global for the YADS namespace prefix -->
<xsl:variable name="yads-ns-has" select="'has'"/>
<xsl:variable name="yads-ns-isa" select="'isa'"/>

<!-- Set up globals for schema URIs -->
<xsl:variable name="uri-rdf-schema">
  <xsl:text>http://www.w3.org/1999/02/22-rdf-syntax-ns#</xsl:text>
</xsl:variable>
<xsl:variable name="uri-yads-schema">
<!--
  <xsl:text>http://dx.doi.org/1014/yads-schema-2002-04-03#</xsl:text>
-->
  <xsl:text>http://www2.elsevier.co.uk/~tony/1014/yads-schema-2002-04-03#</xsl:text>
</xsl:variable>

<!-- Set up global for DOI resolver -->
<xsl:variable name="doi-resolver">
  <xsl:text>http://dx.doi.org/</xsl:text>
</xsl:variable>

<!-- Set up globals for the digraph head and tail -->
<xsl:variable name="digraph-head">
  <xsl:text>
digraph yads { 

graph [
  fontname=arial, fontsize=24
</xsl:text>
<xsl:if test="$title">
<xsl:text>  label="</xsl:text>
<xsl:value-of select="$title"/><xsl:text>"</xsl:text>
</xsl:if>
<xsl:text>
];
node [
  fontname=arial, fontsize=11, fontcolor=black,
  style=filled, color=cornflowerblue,
];
edge [
  fontname=arial, fontsize=11, fontcolor=black,
  style=filled, color=lightblue,
];
rankdir=TB;

</xsl:text>
</xsl:variable>

<xsl:variable name="digraph-tail">
  <xsl:text>}
</xsl:text>
</xsl:variable>

<!-- Set up global for resource/property truncation length -->
<xsl:variable name="max-length">
  <xsl:value-of select="30"/>
</xsl:variable>

<!--
  Match root element - only process <yads> descendants
-->
  <xsl:template match="/">
    <xsl:if test="$type-nodes!=0">
      <xsl:message>Typing nodes...</xsl:message>
    </xsl:if>
    <xsl:choose>
      <xsl:when test="$split">
        <xsl:apply-templates select="//yads"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$digraph-head"/>
          <xsl:apply-templates select="//yads"/>
        <xsl:value-of select="$digraph-tail"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

<!--
  Match <yads> elements - fish out <resource> grandchild element and set up 
  output file based on sequence number if "split" parameter set
-->
  <xsl:template match="yads">
    <xsl:variable name="doi" select="nest/resource"/>
    <xsl:variable name="file" select="concat('yads_', position(), '.rdf')"/>
    <xsl:choose>
      <xsl:when test="$split = 'saxon'">
        <saxon:output href="{$file}">
          <xsl:value-of select="$nl"/>
          <xsl:value-of select="$digraph-head"/>
            <xsl:call-template name="description"/>
          <xsl:value-of select="$digraph-head"/>
        </saxon:output>
      </xsl:when>
      <xsl:when test="$split = 'xalan'">
        <xalan:write select="$file">
          <xsl:value-of select="$nl"/>
          <xsl:value-of select="$digraph-head"/>
            <xsl:call-template name="description"/>
          <xsl:value-of select="$digraph-head"/>
        </xalan:write>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="description"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

<!-- -->
  <xsl:template name="description">
    <xsl:apply-templates/>
  </xsl:template>

<!--
  Generate the next group (collection or item) number
-->
<xsl:template name="next-group-number">
  <xsl:variable name="collections">
    <xsl:call-template name="next-collection-number"/>
  </xsl:variable>
  <xsl:variable name="groups">
      <xsl:call-template name="next-nest-or-item-number"/>
  </xsl:variable>
  <xsl:value-of select="$collections+$groups"/>
</xsl:template>

<xsl:template name="next-collection-number">
  <xsl:variable name="collections">
  <xsl:for-each select="ancestor-or-self::collection|preceding::collection">
    <xsl:if test="position()=last()">
      <xsl:value-of select="position()"/>
    </xsl:if>
  </xsl:for-each>
  </xsl:variable>
  <xsl:choose>
    <xsl:when test="string(number($collections))='NaN'">
  <xsl:value-of select="0"/>
    </xsl:when>
    <xsl:otherwise>
  <xsl:value-of select="$collections"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="next-nest-or-item-number">
  <xsl:variable name="groups">
  <xsl:for-each select="ancestor-or-self::nest|preceding::nest|ancestor-or-self::item|preceding::item">
    <xsl:if test="position()=last()">
      <xsl:value-of select="position()"/>
    </xsl:if>
  </xsl:for-each>
  </xsl:variable>
  <xsl:choose>
    <xsl:when test="string(number($groups))='NaN'">
  <xsl:value-of select="0"/>
    </xsl:when>
    <xsl:otherwise>
  <xsl:value-of select="$groups"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="next-group-number-this-container">
  <xsl:variable name="groups">
  <xsl:for-each select="self::nest|preceding-sibling::nest|self::item|preceding-sibling::item">
    <xsl:if test="position()=last()">
      <xsl:value-of select="position()"/>
    </xsl:if>
  </xsl:for-each>
  </xsl:variable>
  <xsl:choose>
    <xsl:when test="string(number($groups))='NaN'">
  <xsl:value-of select="1"/>
    </xsl:when>
    <xsl:otherwise>
  <xsl:value-of select="$groups"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!--
  Match <collection> elements - test the "order" attribute to select
  the appropriate RDF container element
-->
  <xsl:template match="collection">

    <xsl:variable name="collection">
      <xsl:call-template name="next-group-number"/>
    </xsl:variable>
    <xsl:variable name="order" select="@order"/>
    <xsl:variable name="container">
      <xsl:choose>
        <xsl:when test="$order='choice'">rdf:Alt</xsl:when>
        <xsl:when test="$order='unordered'">rdf:Bag</xsl:when>
        <xsl:when test="$order='sequenced'">rdf:Seq</xsl:when>
        <xsl:otherwise>rdf:Bag</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

<!-- If typing nodes then label the node and add the class URL -->
      <xsl:if test="$type-nodes!=0">
        <xsl:text>  ":_</xsl:text>
        <xsl:value-of select="$collection"/>
        <xsl:text>" [label="</xsl:text>
        <xsl:value-of select="$container"/>
        <xsl:text>", color=lightgrey, URL="</xsl:text>
        <xsl:value-of select="$uri-rdf-schema"/>
        <xsl:value-of select="substring-after($container, 'rdf:')"/>
        <xsl:text>"];</xsl:text>
        <xsl:value-of select="$nl"/>
      </xsl:if>

<!-- Draw the edges for the list items -->
    <xsl:for-each select="nest|item">
      <xsl:variable name="group-name">
        <xsl:choose>
          <xsl:when test="name(.)='nest'">
            <xsl:value-of select="'Nest'"/>
          </xsl:when>
          <xsl:when test="name(.)='item'">
            <xsl:value-of select="'Item'"/>
          </xsl:when>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="group">
        <xsl:call-template name="next-group-number"/>
      </xsl:variable>
      <xsl:variable name="group-no">
        <xsl:call-template name="next-group-number-this-container"/>
      </xsl:variable>
      <xsl:text>  ":_</xsl:text>
      <xsl:value-of select="$collection"/>
      <xsl:text disable-output-escaping="yes">" -> </xsl:text>
      <xsl:text>":_</xsl:text>
      <xsl:value-of select="$group"/>
      <xsl:text>" [label="rdf:_</xsl:text>
      <xsl:value-of select="$group-no"/>
      <xsl:text>", URL="</xsl:text>
      <xsl:value-of select="$uri-rdf-schema"/>
      <xsl:text>_</xsl:text>
      <xsl:value-of select="$group-no"/>
      <xsl:text>"];</xsl:text>
      <xsl:value-of select="$nl"/>
    <xsl:choose>

<!-- If we are typing nodes then label the nodes -->
      <xsl:when test="$type-nodes!=0">
        <xsl:text>":_</xsl:text>
        <xsl:value-of select="$group"/>
        <xsl:text>" [label="</xsl:text>
        <xsl:value-of select="$yads-ns-isa"/>
        <xsl:text>:</xsl:text>
        <xsl:value-of select="$group-name"/>
        <xsl:text>"]</xsl:text>
        <xsl:value-of select="$nl"/>
      </xsl:when>

<!-- If we are not typing nodes then add type to the nodes -->
      <xsl:otherwise>
        <xsl:text>  ":_</xsl:text>
        <xsl:value-of select="$group"/>
        <xsl:text disable-output-escaping="yes">" -> </xsl:text>
        <xsl:text>"</xsl:text>
        <xsl:value-of select="$yads-ns-isa"/>
        <xsl:text>:</xsl:text>
        <xsl:value-of select="$group-name"/>
        <xsl:text>" [label="rdf:type", URL="</xsl:text>
        <xsl:value-of select="$uri-rdf-schema"/>
        <xsl:text>type"];</xsl:text>
        <xsl:value-of select="$nl"/>
        <xsl:text>"</xsl:text>
        <xsl:value-of select="$yads-ns-isa"/>
        <xsl:text>:</xsl:text>
        <xsl:value-of select="$group-name"/>
        <xsl:text>" [color=lightgrey, URL="</xsl:text>
        <xsl:value-of select="$uri-yads-schema"/>
        <xsl:value-of select="$group-name"/>
        <xsl:text>"];</xsl:text>
        <xsl:value-of select="$nl"/>
      </xsl:otherwise>

    </xsl:choose>
    </xsl:for-each>

<!-- Now deal with the container unless we are typing nodes -->
    <xsl:if test="$type-nodes=0">

<!-- Draw the edge for the container type -->
      <xsl:text>  ":_</xsl:text>
      <xsl:value-of select="$collection"/>
      <xsl:text disable-output-escaping="yes">" -> "</xsl:text>
      <xsl:value-of select="$container"/>
      <xsl:text>" [label="rdf:type", URL="</xsl:text>
      <xsl:value-of select="$uri-rdf-schema"/>
      <xsl:text>type</xsl:text>
      <xsl:text>"];</xsl:text>
      <xsl:value-of select="$nl"/>
      <xsl:text>  "</xsl:text>

<!-- Draw the node for the container -->
      <xsl:value-of select="$container"/>
      <xsl:text>" [color=lightgrey, URL="</xsl:text>
      <xsl:value-of select="$uri-rdf-schema"/>
      <xsl:value-of select="substring-after($container, 'rdf:')"/>
      <xsl:text>"];</xsl:text>
      <xsl:value-of select="$nl"/>
    </xsl:if>

    <xsl:value-of select="$nl"/>
    <xsl:apply-templates/>
  </xsl:template>

<!--
  Match <nest> or <item> elements
-->
  <xsl:template match="nest|item">

      <xsl:variable name="group">
        <xsl:call-template name="next-group-number"/>
      </xsl:variable>
      <xsl:variable name="group-name">
        <xsl:choose>
          <xsl:when test="name(.)='nest'">
            <xsl:value-of select="'Nest'"/>
          </xsl:when>
          <xsl:when test="name(.)='item'">
            <xsl:value-of select="'Item'"/>
          </xsl:when>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="group-type">
        <xsl:for-each select="property">
          <xsl:if test="@type='type'">
            <xsl:value-of select="."/>
          </xsl:if>
        </xsl:for-each>
      </xsl:variable>

<!-- If this is a <nest> or a leaf <item> start a subgraph -->
      <xsl:choose>
        <xsl:when test="$terminals!=0">
          <xsl:if test="data|resource">
            <xsl:call-template name="start-subgraph">
              <xsl:with-param name="group" select="$group"/>
              <xsl:with-param name="group-name" select="$group-name"/>
            </xsl:call-template>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="start-subgraph">
            <xsl:with-param name="group" select="$group"/>
            <xsl:with-param name="group-name" select="$group-name"/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
 
<!-- If typing nodes then label the node and add the class URL -->
      <xsl:choose>
        <xsl:when test="$type-nodes!=0">
          <xsl:text>  ":_</xsl:text>
          <xsl:value-of select="$group"/>
          <xsl:text>"</xsl:text>
          <xsl:choose>
            <xsl:when test="string-length($group-type) &gt; 0">
              <xsl:text> [label="</xsl:text>
              <xsl:value-of select="$group-type"/>
              <xsl:text>", color=lightgoldenrod];</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text> [label="</xsl:text>
              <xsl:value-of select="$yads-ns-isa"/>
              <xsl:text>:</xsl:text>
              <xsl:value-of select="$group-name"/>
              <xsl:text>", color=lightgrey, URL="</xsl:text>
              <xsl:value-of select="$uri-yads-schema"/>
              <xsl:value-of select="$group-name"/>
              <xsl:text>"];</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:value-of select="$nl"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>  ":_</xsl:text>
          <xsl:value-of select="$group"/>
          <xsl:text>" [color=lightgrey];</xsl:text>
          <xsl:value-of select="$nl"/>
        </xsl:otherwise>
      </xsl:choose>

<!-- Now process the child elements -->
      <xsl:for-each select="*">

        <xsl:if test="$type-nodes=0 or not(@type='type')">
          <xsl:text>  ":_</xsl:text>
          <xsl:value-of select="$group"/>
          <xsl:text disable-output-escaping="yes">" -> </xsl:text>
        </xsl:if>

        <xsl:choose>

<!-- Process <collection> child elements -->
          <xsl:when test="name(.)='collection'">
            <xsl:variable name="collection">
              <xsl:call-template name="next-group-number"/>
            </xsl:variable>
            <xsl:text>":_</xsl:text>
            <xsl:value-of select="$collection"/>
            <xsl:text>" [label="</xsl:text>
            <xsl:value-of select="$yads-ns-has"/>
            <xsl:text>:collection", URL="</xsl:text>
            <xsl:value-of select="$uri-yads-schema"/>
            <xsl:text>collection"];</xsl:text>
            <xsl:value-of select="$nl"/>
            <xsl:text>  ":_</xsl:text>
            <xsl:value-of select="$collection"/>
            <xsl:choose>
              <xsl:when test="$type-nodes!=0">
                <xsl:variable name="order" select="@order"/>
                <xsl:variable name="container">
                  <xsl:choose>
                    <xsl:when test="$order='choice'">rdf:Alt</xsl:when>
                    <xsl:when test="$order='unordered'">rdf:Bag</xsl:when>
                    <xsl:when test="$order='sequenced'">rdf:Seq</xsl:when>
                    <xsl:otherwise>rdf:Bag</xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:text>" [label="</xsl:text>
                <xsl:value-of select="$container"/>
                <xsl:text>", color=lightgrey];</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>" [color=lightgrey];</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>

<!-- Process <data> child elements -->
          <xsl:when test="name(.)='data'">
            <xsl:text>"</xsl:text>
            <xsl:variable name="data">
              <xsl:call-template name="data-uri">
                <xsl:with-param name="data" select="."/>
              </xsl:call-template>
            </xsl:variable>
            <xsl:value-of select="substring($data, 0, $max-length)"/>
            <xsl:if test="string-length($data) &gt; $max-length">
              <xsl:text>...</xsl:text>
              <xsl:value-of select="substring($data, string-length($data))"/>
            </xsl:if>
            <xsl:if test="string-length($data) = 0">
              <xsl:text>:</xsl:text>
            </xsl:if>
            <xsl:text>" [label="</xsl:text>
            <xsl:value-of select="$yads-ns-has"/>
            <xsl:text>:resource", URL="</xsl:text>
            <xsl:value-of select="$uri-yads-schema"/>
            <xsl:text>resource"];</xsl:text>
          </xsl:when>

<!-- Process <resource> child elements -->
          <xsl:when test="name(.)='resource'">
            <xsl:text>"</xsl:text>
            <xsl:value-of select="substring(., 0, $max-length)"/>
            <xsl:if test="string-length(.) &gt; $max-length">
              <xsl:text>...</xsl:text>
              <xsl:value-of select="substring(., string-length(.))"/>
            </xsl:if>
            <xsl:if test="string-length(.) = 0">
              <xsl:text>:</xsl:text>
            </xsl:if>
            <xsl:text>" [label="</xsl:text>
            <xsl:value-of select="$yads-ns-has"/>
            <xsl:text>:resource", URL="</xsl:text>
            <xsl:value-of select="$uri-yads-schema"/>
            <xsl:text>resource"];</xsl:text>
          </xsl:when>

<!-- Process <property> child elements -->
          <xsl:when test="name(.)='property'">
            <xsl:if test="$type-nodes=0 or not(@type='type')">
              <xsl:variable name="this-property" select="."/>
              <xsl:variable name="property">
                <xsl:for-each select="//property">
                  <xsl:if test=".=$this-property">
                    <xsl:value-of select="position()"/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:variable>
              <xsl:text>"node_</xsl:text>
              <xsl:value-of select="$property"/>
              <xsl:text>" [label="</xsl:text>
              <xsl:value-of select="$yads-ns-has"/>
              <xsl:value-of select="concat(':', @type)"/>
              <xsl:text>", URL="</xsl:text>
              <xsl:value-of select="$uri-yads-schema"/>
              <xsl:value-of select="@type"/>
              <xsl:text>"];</xsl:text>
            </xsl:if>
          </xsl:when>

        </xsl:choose>
        <xsl:value-of select="$nl"/>
      </xsl:for-each>

      <xsl:apply-templates/>

<!-- Close the subgraph -->
      <xsl:choose>
        <xsl:when test="$terminals!=0">
          <xsl:if test="data|resource">
            <xsl:call-template name="end-subgraph"/>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="end-subgraph"/>
        </xsl:otherwise>
      </xsl:choose>
 
      <xsl:value-of select="$nl"/>
  </xsl:template>

<!-- Start and end subgraph templates -->
  <xsl:template name="start-subgraph">
    <xsl:param name="group"/>
    <xsl:param name="group-name"/>
    <xsl:text>subgraph cluster_</xsl:text>
    <xsl:value-of select="$group"/>
    <xsl:text> {</xsl:text>
    <xsl:value-of select="$nl"/>
    <xsl:value-of select="$nl"/>
    <xsl:text>  style=dashed; color=lightgrey;</xsl:text>
    <xsl:value-of select="$nl"/>
    <xsl:text>  fontname=arial; fontsize=11;</xsl:text>
    <xsl:value-of select="$nl"/>
    <xsl:text>  fontcolor="black"; label="</xsl:text>
    <xsl:value-of select="$group-name"/>
    <xsl:if test="comment()">
      <xsl:text> - </xsl:text>
      <xsl:value-of disable-output-escaping="yes"
                    select="normalize-space(comment())"/>
    </xsl:if>
    <xsl:text>";</xsl:text>
    <xsl:value-of select="$nl"/>
    <xsl:value-of select="$nl"/>
  </xsl:template>

  <xsl:template name="end-subgraph">
    <xsl:text>}</xsl:text>
    <xsl:value-of select="$nl"/>
  </xsl:template>

<!--
  Match <data> elements - convert to YADS resource element
-->
  <xsl:template match="data">
    <xsl:variable name="data">
      <xsl:call-template name="data-uri">
        <xsl:with-param name="data" select="."/>
      </xsl:call-template>
    </xsl:variable>
      <xsl:call-template name="_resource">
        <xsl:with-param name="resource" select="$data"/>
      </xsl:call-template>
  </xsl:template>

<!--
  Template with minimal treatment for converting a <data> element
  to a URI of scheme "data:". Basically this just prepends a
  string "data:," and hex escapes any spaces. Obviously a more 
  complete hex excaping is required.
-->
  <xsl:template name="data-uri">
    <xsl:param name="data"/>
    <xsl:text>data:,</xsl:text>
    <xsl:choose>
      <xsl:when test="contains($data, ' ')">
        <xsl:call-template name="replace-substring">
          <xsl:with-param name="original" select="$data"/>
          <xsl:with-param name="substring" select="' '"/>
          <xsl:with-param name="replacement" select="'%20'"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$data"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

<!--
  Match <resource> elements - convert to YADS resource element
-->
  <xsl:template match="resource">
    <xsl:variable name="resource">
      <xsl:value-of select="." disable-output-escaping="yes"/>
    </xsl:variable>
    <xsl:call-template name="_resource">
      <xsl:with-param name="resource" select="$resource"/>
    </xsl:call-template>
  </xsl:template>

<!--
  Common template for handling <data> and <resource> elements
-->
  <xsl:template name="_resource">
    <xsl:param name="resource"/>
    <xsl:text>  "</xsl:text>
    <xsl:value-of select="substring($resource, 0, $max-length)"/>
    <xsl:if test="string-length($resource) &gt; $max-length">
      <xsl:text>...</xsl:text>
      <xsl:value-of select="substring($resource, string-length($resource))"/>
    </xsl:if>
    <xsl:if test="string-length($resource) = 0">
      <xsl:text>:</xsl:text>
    </xsl:if>
    <xsl:text>"</xsl:text>
    <xsl:text> [color=plum, URL="</xsl:text>
    <xsl:choose>
      <xsl:when test="starts-with($resource, 'doi:')">
        <xsl:value-of select="$doi-resolver"/>
        <xsl:value-of select="substring-after($resource, 'doi:')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$resource"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>"];</xsl:text>
    <xsl:value-of select="$nl"/>
  </xsl:template>

<!--
  Match <property> elements - promote "type" attribute to appropriate
  YADS property element
-->
  <xsl:template match="property">
    <xsl:if test="$type-nodes=0 or not(@type='type')">
      <xsl:variable name="this-property" select="."/>
        <xsl:variable name="property">
        <xsl:for-each select="//property">
          <xsl:if test=".=$this-property">
            <xsl:value-of select="position()"/>
          </xsl:if>
        </xsl:for-each>
      </xsl:variable>
      <xsl:text>  "</xsl:text>
      <xsl:text>node_</xsl:text>
      <xsl:value-of select="$property"/>
      <xsl:text>"</xsl:text>
      <xsl:text> [shape=box, label="</xsl:text>
      <xsl:value-of select="substring(normalize-space(.), 0, $max-length)"/>
      <xsl:if test="string-length(normalize-space(.)) &gt; $max-length">
        <xsl:text>...</xsl:text>
        <xsl:value-of select="substring(normalize-space(.), string-length(normalize-space(.)))"/>
      </xsl:if>
      <xsl:text>"];</xsl:text>
      <xsl:value-of select="$nl"/>
    </xsl:if>
  </xsl:template>

<!--
  Utility template for replacing substrings
-->
  <xsl:template name="replace-substring">
    <xsl:param name="original"/>
    <xsl:param name="substring"/>
    <xsl:param name="replacement" select="''"/>
    <xsl:variable name="first">
      <xsl:choose>
        <xsl:when test="contains($original, $substring)">
          <xsl:value-of select="substring-before($original, $substring)"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$original"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="middle">
      <xsl:choose>
        <xsl:when test="contains($original, $substring)">
          <xsl:value-of select="$replacement"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text></xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="last">
      <xsl:choose>
        <xsl:when test="contains($original, $substring)">
          <xsl:choose>
            <xsl:when test="contains(substring-after($original, $substring), $substring)">
              <xsl:call-template name="replace-substring">
                <xsl:with-param name="original"><xsl:value-of select="substring-after($original, $substring)"/></xsl:with-param>
                <xsl:with-param name="substring"><xsl:value-of select="$substring"/></xsl:with-param>
                <xsl:with-param name="replacement"><xsl:value-of select="$replacement"/></xsl:with-param>
              </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="substring-after($original, $substring)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text></xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:value-of select="concat($first, $middle, $last)"/>
  </xsl:template>

</xsl:transform>
